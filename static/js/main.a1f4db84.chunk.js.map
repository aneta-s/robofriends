{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","username","App","onSearchChange","event","searchfield","target","value","console","log","filterRobots","filter","robot","toLowerCase","includes","length","Helmet","content","itemProp","property","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a1f4db84.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n        );\n      })}\n    </div>\n  );\n};\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"1px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\nexport default ErrorBoundry;\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport { robots } from \"../containers/robots\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: robots,\n      searchfield: \"\",\n    };\n  }\n  componentDidMount() {\n    this.setState({ robots: robots });\n    console.log(\"componentDidMount\");\n  }\n  /*   componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => {\n        this.setState ({robots: users })});\n  } */\n\n  /* OR componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }  */\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filterRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n              <h1 className=\"f1\">RoboFriends</h1>\n\n        <Helmet>\n          {/* HTML Meta Tags */}\n          <title>React app Robofriends from scratch.</title>\n          <meta\n            name=\"description\"\n            content=\"Although lightweight, the Robofriends application is making use of ReactJS library. This application generates a list of users from an API. The features include filtering users, search box, scroll bar, loading time, error boundary message and a customized logo.\nTechnologies used: React.js, RESTful API, JSON, Git, Visual Studio Code, NPM.\"\n          />\n          {/* Google / Search Engine Tags */}\n          <meta itemProp=\"name\" content=\"React app Robofriends from scratch.\" />\n          <meta\n            itemProp=\"description\"\n            content=\"Although lightweight, the Robofriends application is making use of ReactJS library. This application generates a list of users from an API. The features include filtering users, search box, scroll bar, loading time, error boundary message and a customized logo.\nTechnologies used: React.js, RESTful API, JSON, Git, Visual Studio Code, NPM.\"\n          />\n          <meta\n            itemProp=\"image\"\n            content=\"https://imgur.com/nMjDh3g\"\n          />\n          {/* Facebook Meta Tags */}\n          <meta\n            property=\"og:url\"\n            content=\"https://aneta-s.github.io/robofriends/\"\n          />\n          <meta property=\"og:type\" content=\"website\" />\n          <meta\n            property=\"og:title\"\n            content=\"React app Robofriends from scratch.\"\n          />\n          <meta\n            property=\"og:description\"\n            content=\"Although lightweight, the Robofriends application is making use of ReactJS library. This application generates a list of users from an API. The features include filtering users, search box, scroll bar, loading time, error boundary message and a customized logo.\nTechnologies used: React.js, RESTful API, JSON, Git, Visual Studio Code, NPM.\"\n          />\n          <meta\n            property=\"og:image\"\n            content=\"https://imgur.com/nMjDh3g\"\n          />\n          {/* Twitter Meta Tags */}\n          <meta name=\"twitter:card\" content=\"summary_large_image\" />\n          <meta\n            name=\"twitter:title\"\n            content=\"React app Robofriends from scratch.\"\n          />\n          <meta\n            name=\"twitter:description\"\n            content=\"Although lightweight, the Robofriends application is making use of ReactJS library. This application generates a list of users from an API. The features include filtering users, search box, scroll bar, loading time, error boundary message and a customized logo.\nTechnologies used: React.js, RESTful API, JSON, Git, Visual Studio Code, NPM.\"\n          />\n          <meta\n            name=\"twitter:image\"\n            content=\"https://imgur.com/nMjDh3g\"\n          />\n          {/* Meta Tags Generated via http://heymeta.com */}\n        </Helmet>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filterRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}